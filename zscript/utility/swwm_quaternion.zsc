/*
   Quaternion math helper class.
   Provides only the bare minimum needed to implement 6DOF functionality. For a
   more extensive implementation, please refer to Gutamatics.

   Copyright (c)2018-2021 Marisa Kirisame, UnSX Team

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to
   deal in the Software without restriction, including without limitation the
   rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
   sell copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
   IN THE SOFTWARE.
*/

Class swwm_Quat
{
	protected double W, X, Y, Z;

	swwm_Quat init( double w, double x, double y, double z )
	{
		self.W = w;
		self.X = x;
		self.Y = y;
		self.Z = z;
		return self;
	}

	void copy( swwm_Quat q )
	{
		W = q.W;
		X = q.X;
		Y = q.Y;
		Z = q.Z;
	}

	static swwm_Quat create( double w, double x, double y, double z )
	{
		return new("swwm_Quat").init(w,x,y,z);
	}

	static swwm_Quat create_axis( Vector3 axis, double theta )
	{
		double scale = axis dot axis;
		if ( scale < double.epsilon ) return swwm_Quat.create(1,0,0,0);
		theta *= 0.5;
		double f = sin(theta)/sqrt(scale);
		return swwm_Quat.create(cos(theta),axis.x*f,axis.y*f,axis.z*f);
	}

	static swwm_Quat create_euler( double pitch, double yaw, double roll )
	{
		swwm_Quat zrot = swwm_Quat.create_axis((0,0,1),yaw);
		swwm_Quat yrot = swwm_Quat.create_axis((0,1,0),pitch);
		swwm_Quat xrot = swwm_Quat.create_axis((1,0,0),roll);
		swwm_Quat sum = zrot.qmul(yrot);
		sum = sum.qmul(xrot);
		return sum;
	}

	// copied here since Actor.Normalize180 is not (yet) clearscope
	static double Normalize180( double ang )
	{
		ang = ang%360;
		ang = (ang+360)%360;
		if ( ang > 180 ) ang -= 360;
		return ang;
	}

	double, double, double to_euler()
	{
		double stest = z*x-w*y;
		double yawY = 2*(w*z+x*y);
		double yawX = 1-2*(y*y+z*z);
		double st = 0.4999995;
		double pitch = 0;
		double yaw = 0;
		double roll = 0;
		if ( stest <= -st )
		{
			pitch = 90;
			yaw = atan2(yawY,yawX);
			roll = Normalize180(yaw+(2*atan2(x,w)));
		}
		else if ( stest > st )
		{
			pitch = -90;
			yaw = atan2(yawY,yawX);
			roll = Normalize180(yaw+(2*atan2(x,w)));
		}
		else
		{
			pitch = -asin(2*stest);
			yaw = atan2(yawY,yawX);
			roll = atan2(2*(w*x+y*z),(1-2*(x*x+y*y)));
		}
		return pitch, yaw, roll;
	}

	swwm_Quat qmul( swwm_Quat q ) const
	{
		return swwm_Quat.create(w*q.w-x*q.x-y*q.y-z*q.z,w*q.x+x*q.w+y*q.z-z*q.y,w*q.y+y*q.w+z*q.x-x*q.z,w*q.z+z*q.w+x*q.y-y*q.x);
	}
}
